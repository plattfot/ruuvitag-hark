#! /bin/env python

"""Simple http server, that returns data in json.

Based on the http_server_asyncio_rx.py example in the ruuvitag-sensor repo[0].

[0]: https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server_asyncio_rx.py

Executes get data for sensors in the background.
Endpoints:
    http://0.0.0.0:5000/data
    http://0.0.0.0:5000/data/{mac}
"""

import getopt
import os
import sys
import toml

from aiohttp import web
from ruuvitag_sensor.ruuvi_rx import RuuviTagReactive

class ArgparseFaux:
    """Get the same interface as argparse's error."""
    def __init__(self, prog=os.path.basename(sys.argv[0])):
        self.prog=prog

    def error(self, message, errno=2):
        print("{prog}: {msg}\nTry `{prog} --help' for more information.".format(
            prog=self.prog,
            msg=message))
        sys.exit(errno)

def argumentParser():
    parser = ArgparseFaux()
    helpstring="""usage: {prog} [OPTIONS]...
Simple http server, that returns ruuvitag data in json.

Options:
  -T, --tag MAC=NAME   Specify a ruuvitag to fetch data from
      --config CONFIG  Read settings from a config file
  -p, --port PORT      Set the port number, default 5000
  -h, --help           Print this message then exits
""".format(prog=parser.prog)

    class Arguments:
        def __init__(self):
            self.tags = {}
            self.config = None
            self.port=None
    args = Arguments()
    try:
        opts, args.shell_args = getopt.gnu_getopt(
            sys.argv[1:],
            "hT:",
            ["help",
             "tag=",
             "config=",
             ])
    except getopt.GetoptError as err:
        parser.error(err)

    for option, argument in opts:
        if option in ("-h", "--help"):
            print(helpstring)
            sys.exit(0)
        elif option in ("-T", "--tag"):
            mac_name = argument.split('=')
            args.tags[mac_name[0]] = mac_name[1]
        elif option == "--config":
            args.config = argument

    return parser, args

allData = {}
async def get_all_data(request):
    return web.json_response(allData)

async def get_data(request):
    mac = request.match_info.get('mac')
    if mac not in allData:
        return web.json_response(status=404)
    return web.json_response(allData[mac])

def setup_routes(app):
    app.router.add_get('/data', get_all_data)
    app.router.add_get('/data/{mac}', get_data)

if __name__ == '__main__':

    parser, args = argumentParser()

    if args.config:
        with open(args.config) as config_file:
            config = toml.load(config_file)
            for mac, data in config['tags'].items():
                try:
                    if not mac in args.tags:
                        args.tags[mac] = data['name']
                except KeyError:
                    pass
            if not args.port:
                try:
                    args.port = config['settings']['port']
                except KeyError:
                    pass

    def handle_new_data(data):
        global allData
        data[1]['name'] = args.tags[data[0]]
        allData[data[0]] = data[1]

    ruuvi_rx = RuuviTagReactive(list(args.tags.keys()))
    data_stream = ruuvi_rx.get_subject()
    data_stream.subscribe(handle_new_data)

    # Setup and start web application
    app = web.Application()
    setup_routes(app)
    web.run_app(app, host='0.0.0.0', port=args.port if args.port else 5000)

